# -*- coding: utf-8 -*-
"""Lab7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qNzwxC6SThMD4-mVd7_2IQs8kyk-uKzB
"""

import sympy as sp
import numpy as np

#Exercise 1
def x1a(n):
  return(4*n + 1)

def x1b(n):
  return(3**n)

def x1c(n):
  return(n**3)

def x1d(n):
  if n==1 or n==2:
    return 1
  else:
    return x1d(n-1) + x1d(n-2)

n0 = 10;
ni = 0;
list_x1a = [];
list_x1b = [];
list_x1c = [];
list_x1d = [];

for ni in range(1, n0+1):
  list_x1a.append(x1a(ni))
  list_x1b.append(x1b(ni))
  list_x1c.append(x1c(ni))
  list_x1d.append(x1d(ni))

print(list_x1a)
print(list_x1b)
print(list_x1c)
print(list_x1d)

#Exercise 2a
a1 = 5;
a2 = 20;
d = a2 - a1;

a2a = lambda n: a1 + (n-1)*d

n0 = 55
print(a2a(n0))
for ni in range(1, 100):
  if(a2a(ni) == 230):
    print(ni);
    break;
  elif(a2a(ni) > 230):
    print("Khong tim duoc n nao")
    break;

#Exercise 2b
a1 = 120;
a2 = 60;
d = a2 - a1;

a2b = lambda n: a1 + (n-1)*d

n0 = 10
print(a2b(n0))
for ni in range(1, 100):
  if(a2b(ni) == 15/32):
    print(ni);
    break;
  elif(a2b(ni) > 15/32):
    print("Khong tim duoc n nao")
    break;

#Exercise 3
x = sp.symbols('x')
f3a = sp.cos(x)
f3b = sp.ln(x)
f3c = sp.exp(x)

x0 = sp.pi/3
x1 = 2
x2 = 3

ord_a = 6
ord_b = 10
ord_c = 12

Taylor_f3a = f3a.series(x,x0,ord_a)
Taylor_f3b = f3b.series(x,x0,ord_b)
Taylor_f3c = f3c.series(x,x0,ord_c)

print("Taylor_f3a = ", Taylor_f3a)
print("Taylor_f3b = ", Taylor_f3b)
print("Taylor_f3c = ", Taylor_f3c)

#Exercise 4
x = sp.symbols('x')

f4a = sp.cos(x)
f4b = sp.exp(x)
f4c = 1/(1 - x)
f4d = sp.atan(x)

x0 = 0

ord = 6
ord_1 = 12

Maclaurin_f4a = f4a.series(x,x0,ord)
Maclaurin_f4b = f4b.series(x,x0,ord_1)
Maclaurin_f4c = f4c.series(x,x0,ord_1)
Maclaurin_f4d = f4d.series(x,x0,ord_1)

print("Maclaurin_f4a = ", Maclaurin_f4a)
print("Maclaurin_f4b = ", Maclaurin_f4b)
print("Maclaurin_f4c = ", Maclaurin_f4c)
print("Maclaurin_f4d = ", Maclaurin_f4d)

#Exercise 5
n = sp.symbols('n')

f5a = (4*n**2 + 1)/(3*n**2 +2)
f5b = sp.sqrt(n**2 + 1) - n
f5c = sp.sqrt(2*n + sp.sqrt(n)) - sp.sqrt(2*n + 1)
f5d = 3*(5)**n - 2**n / (4**n + 2.5**n)
f5e = n*sp.sin(sp.sqrt(n))/(n**2 + n - 1)

lim_f5a = sp.limit(f5a, n, sp.oo)
lim_f5b = sp.limit(f5b, n, sp.oo)
lim_f5c = sp.limit(f5c, n, sp.oo)
lim_f5d = sp.limit(f5d, n, sp.oo)
lim_f5e = sp.limit(f5e, n, sp.oo)

print(lim_f5a)
print(lim_f5b)
print(lim_f5c)
print(lim_f5d)
print(lim_f5e)

#Exercise 6
n = sp.symbols('n')

f6a = 1 - 0.2**n
f6b = n**3/n**3 + 1
f6c = (3 + 5*n**2)/(n + n**2)
f6d = n**3/(n + 1)
f6e = sp.exp(1/n)
f6f = sp.sqrt(n + 1)/(9*n + 1)
f6g = (-1)**(n + 1)*n/(n + sp.sqrt(n))
f6h = sp.tan((2*n*sp.pi)/(1 + 8*n))
f6i = sp.factorial(2*n - 1)/sp.factorial(2*n + 1)

lim_f6a = sp.limit_seq(f6a, n)
lim_f6b = sp.limit_seq(f6b, n)
lim_f6c = sp.limit_seq(f6c, n)
lim_f6d = sp.limit_seq(f6d, n)
lim_f6e = sp.limit_seq(f6e, n)
lim_f6f = sp.limit_seq(f6f, n)
lim_f6g = sp.limit_seq(f6g, n)
lim_f6h = sp.limit_seq(f6h, n)
lim_f6i = sp.limit_seq(f6i, n)

print(lim_f6a)
print(lim_f6b)
print(lim_f6c)
print(lim_f6d)
print(lim_f6e)
print(lim_f6f)
print(lim_f6g)
print(lim_f6h)
print(lim_f6i)

#Exercise 7
import math

def day_a(a,k):
  a= sp.lambdify(n, a)

  for ni in range(1, k + 1):
    ai = a(ni)
    return ai;

n = sp.symbols('n')
k = 5
an7a = 1-(0.2)**n
an7b = 2*n/(n**2+1)

print("7a)" +  str(an7a) + ", n = 0,1,2..." + str(k))
day_a(an7a, k)
print("7b)" +  str(an7b) + ", n = 0,1,2..." + str(k))
day_a(an7b, k)

from matplotlib import pyplot as plt

n1 = np.arange(0,k+1,1)
an7a_p = 1 - (0.2)**n1
an7b_p = 2*n1/(n1**2+1)


plt.plot(n1,an7a_p)
plt.plot(n1,an7b_p)
plt.title("Ex 7a, b")
plt.show()

n1 = np.arange(1,k+1,1)
an7c = lambda n1: (-1)**(n1-1)/(5**n1)

an7c_p_arr = list(map(an7c, n1))

plt.plot(n1,an7c_p_arr)
plt.title("Ex 7c")
plt.show()

n_vals = np.arange(1, k + 1)

an7d = [1 / math.factorial(n + 1) for n in n_vals]

an7e = [1]
for i in range(1, k):
    next_term = 5 * an7e[-1] - 3
    an7e.append(next_term)

an7f = [2]
for i in range(1, k):
    next_term = an7f[-1] / (an7f[-1] + 1)
    an7f.append(next_term)

plt.plot(n_vals, an7d, marker='o', label="7d")
plt.plot(n_vals, an7e, marker='o', label="7e")
plt.plot(n_vals, an7f, marker='o', label="7f")
plt.title("Exercise 7d, 7e, 7f")
plt.xlabel("n")
plt.ylabel("aₙ")
plt.legend()
plt.grid(True)
plt.show()

#Exercise 8
#8a
n = np.arange(0,100,1)
an8a_p = 1 - (-2/math.exp(1))**n
plt.plot(n,an8a_p)
plt.title("Ex 8a")
plt.show()

#8b
n = np.arange(0.05, 5 * np.pi, 0.1)

an8b_p = np.sqrt(n) * np.sin(np.pi / np.sqrt(n))
an8d_p = (n ** 2) * np.cos(n) / (1 + n ** 2)

plt.plot(n, an8b_p, label="8b")
plt.plot(n, an8d_p, label="8d")
plt.title("Ex 8b & 8d")
plt.legend()
plt.grid(True)
plt.show()

#8c
n_c = np.arange(1, 100, 1)
an8c_p = np.sqrt((3 + 2 * n_c**2) / (8 * n_c**2 + n_c))

plt.plot(n_c, an8c_p)
plt.title("Ex 8c")
plt.grid(True)
plt.show()

# 8e
def double_factorial_odd(n):
    result = 1
    for i in range(1, 2 * n, 2):  # 1, 3, 5, ..., 2n - 1
        result *= i
    return result

n_ef = np.arange(1, 21, 1)
an8e_p = [double_factorial_odd(n) / math.factorial(n) for n in n_ef]

plt.plot(n_ef, an8e_p, marker='o')
plt.title("Ex 8e")
plt.grid(True)
plt.show()

#8f
an8f_p = [double_factorial_odd(n) / (2**n) for n in n_ef]

plt.plot(n_ef, an8f_p, marker='o')
plt.title("Ex 8f")
plt.grid(True)
plt.show()

#Exercise 9
#9a
print("cau a")
n = sp.symbols('n')
series_a = sp.Sum(4**n, (n, 0, sp.oo))
converged_a = series_a.is_convergent()
if converged_a:
  print("A) Dãy số hội tụ")
else:
  print("A) Dãy số không hội tụ")

# 9b
print("\nCâu b:")
series_b = sp.Sum(5 / 2**n, (n, 1, sp.oo))
if series_b.is_convergent():
    print("Dãy hội tụ.")
else:
    print("Dãy số không hội tụ.")

#Exercise 10
import math

def fib_recursive(i):
    if i <= 1:
        return i
    else:
        return fib_recursive(i-1) + fib_recursive(i-2)

def fib_binet(i):
    phi = 1.618034
    return round((phi**i - (1 - phi)**i) / math.sqrt(5))

def fib_floor_phi(i):
    phi = 1.618034
    return math.floor(fib_recursive(i - 1) * phi)

print("Fibonacci từ i = 1 đến 10:\n")
for i in range(1, 11):
    print(f"i = {i}: Recursion = {fib_recursive(i)}, Binet = {fib_binet(i)}, Floor = {fib_floor_phi(i)}")

P = 28000
i = 0.03
n_years = 3

print("Exercise 11: Salary over first 3 years:")
for n in range(1, n_years + 1):
    salary = P * (1 + i)**n
    print(f"Year {n}: ${salary:.2f}")